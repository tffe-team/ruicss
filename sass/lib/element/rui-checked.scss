// @charset "utf-8";
// @import "../core/reset";
// 定义checked基础样式
@mixin _checked{
    display: inline-block;
    position: relative;
    @include square(map-get($checked, size));
    font-size: map-get($checked, font-size);
    font-family: map-get($ico, font-name);
    vertical-align: middle;
    > input,
    > .type {
        @include square(100%);
    }
    > input {
        position: absolute;
        opacity: 0;
    }
    > .type {
     @include align;
        background-color: map-get($checked, bgcolor);
        @include border(
            $border-color : map-get($checked, border-color),
            $border-width : map-get($checked, border-width),
            $radius : map-get($checked, radius)
        );
        &::before{
            content: map-get($checked, content);
            color: map-get($checked, color);
        }
    }
    > input:checked + .type {
        &::after {
            border-color: map-get($checked, on-border-color);
        }
        background-color: map-get($checked, on-bgcolor);
        &::before {
            color: map-get($checked, color);

        }
    }
    > input:disabled + .type {
        @if map-get($checked, border-color) != null {
            &::after {
                border-color: lighten(map-get($checked, border-color), 12%);
            }
        }
        @if map-get($checked, bgcolor) != null {
            background-color: lighten(map-get($checked, bgcolor), 15%);
        }
        @if map-get($checked, color) != null {
            &::before {
                color: lighten(map-get($checked, color), 30%);
            }
        }
        
    }
    > input:checked:disabled + .type {
        @if map-get($checked, on-border-color) != null {
            &::after {
                border-color: lighten(map-get($checked, on-border-color), 12%);
            }
        }
        @if map-get($checked, on-bgcolor) != null {
            background-color: lighten(map-get($checked, on-bgcolor), 15%);
        }
        @if map-get($checked, color) != null {
            &::before {
                color: lighten(map-get($checked, on-color), 30%);
            }
        }
        
    }
}
$prefix: map-get($base, prefix);
@mixin rui-checked($name: default,
    $border-color: default, 
    $border-width: default ,
    $on-border-color: default, 
    $size: default,
    $radius: default, 
    $bgcolor: default, 
    $on-bgcolor: default, 
    $content: default, 
    $font-size: default,
    $color: default,
    $on-color: default) {
    $name: if($name == default, "", "-#{$name}");
    @if $border-color == default {
        $border-color : map-get($checked, border-color);
    }
    @if $on-border-color == default {
        $on-border-color : map-get($checked, on-border-colo);
    }

    @if $border-width == default {
        $border-width : map-get($checked, border-width);
    }
    @if $size == default {
        $size : map-get($checked, size);
    }
    @if $radius == default {
        $radius : map-get($checked, radius);
    }
    @if $bgcolor == default {
        $bgcolor : map-get($checked, bgcolor);
    }
    @if $on-bgcolor == default {
        $on-bgcolor : map-get($checked, on-bgcolor);
    }
    @if $content == default {
        $content : map-get($checked, content);
    }
    @if $font-size == default {
        $font-size : map-get($checked, font-size);
    }
    @if $content == default {
        $content : map-get($checked, content);
    }
    @if $color == default {
        $color : map-get($checked, color);
    }
    @if $on-color == default {
        $on-color : map-get($checked, on-color);
    }
    .#{$prefix}-checked#{$name} {
        @include square($size);
        font-size: $font-size;
        > .type {
            background-color: $bgcolor;
            @include border(
                $border-color : $border-color,
                $border-width : $border-width,
                $radius : $radius
            );
            &::before{
                content: $content;
                color: $color;
            }
        }
        > input:checked + .type {
            &::after {
                border-color: $on-border-color;
            }
            background-color: $on-bgcolor;
            &::before {
                color: $on-color;
            }
        }
        > input:disabled + .type {
           @if $border-color != null  {
                &::after {
                    border-color: lighten($border-color, 12%);
                }
            }
            @if $bgcolor != null {
                background-color: lighten($bgcolor, 15%);
            }
            @if $color != null {
                &::before {
                    color: lighten($color, 30%);
                }
            }
            
        }
        > input:checked:disabled + .type {
            @if $on-border-color != null {
                &::after {
                    border-color: lighten($on-border-color, 12%);
                }
            }
            @if $on-bgcolor != null {
                background-color: lighten($on-bgcolor, 15%);
            }
            @if $on-color != null {
                &::before {
                    color: lighten($on-color, 30%);
                }
            }
        }
        //增量
        @content;
    }
}
.#{$prefix}-checked {
    @include _checked;
}